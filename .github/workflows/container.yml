name: Publish Container

on:
  push:
    tags:
      - "v*"
      
  workflow_dispatch:
    inputs:
      fluence_branch:
        description: "Fluence node branch"
        required: false
        default: "latest"
      container_tag:
        description: "Container tag"
        required: false
        default: "latest"
      services_json:
        description: "services.json URL"
        required: false
        default: "https://github.com/fluencelabs/builtin-services/releases/latest/download/services.json"
      services_version:
        description: "version of the services.json"
        required: false
        default: ""

jobs:
  build-publish:
    name: Build and publish
    runs-on: ubuntu-latest
    env:
      FLUENCE_BRANCH: ${{ github.event.inputs.fluence_branch || 'latest' }}
      CONTAINER_TAG: ${{ github.event.inputs.container_tag || 'latest' }}
      SERVICES_JSON: ${{ github.event.inputs.services_json || 'https://github.com/fluencelabs/builtin-services/releases/latest/download/services.json' }}
      SERVICES_VERSION: ${{ github.event.inputs.services_version || '' }}
    
    steps:
      - uses: actions/checkout@v2

      - name: Set RELEASE_VERSION from ${{ env.GITHUB_REF }}
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      ### Prepare docker & login to Dockerhub
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine container tags
        run: |
          TAG="${{ env.CONTAINER_TAG }}"
          RUN="${{ github.run_number }}"
          if [ "$TAG" = "latest" ] || [ "$TAG" = "" ]; then
            TAG="latest"
          fi
          TAGS=fluencelabs/node:${TAG},fluencelabs/node:${TAG}_latest,fluencelabs/node:${TAG}_v${RUN}
          
          SERVICES_VERSION="${{ env.SERVICES_JSON }}"
          if [ "$SERVICES_VERSION" != "" ]; then
            TAGS="$TAGS,fluencelabs/node:${TAG}_${SERVICES_VERSION},fluencelabs/node:${TAG}_${SERVICES_VERSION}_v${RUN}"
          fi
          
          echo "TAGS=$TAGS" | tee -a $GITHUB_ENV
          echo "FLUENCE_TAG=${{ env.FLUENCE_BRANCH }}" | tee -a $GITHUB_ENV
          echo "BUILD_DATE=$(date '+%Y-%m-%dT%H:%M:%S%:z')"

      ### Build and push docker image
      - name: Build and push
        id: docker_publish
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: "${{ env.TAGS }}"
          build-args: |
            FLUENCE_TAG=${{ env.FLUENCE_TAG }}
            SERVICES_JSON=${{ env.SERVICES_JSON }}
            SERVICES_VERSION=${{ env.SERVICES_JSON }}
            COMMIT=${{ github.sha }}
            BUILD_DATE=${{ env.BUILD_DATE }}
            RUN_NUMBER=${{ github.run_number }}
            TAG=${{ env.CONTAINER_TAG }}

      ### Create GitHub release
      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v1
        with:
          configuration: ".github/workflows/changelog_config.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse metadata from docker publish
        id: metadata
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            try {
                let metadata = JSON.parse("${{ steps.docker_publish.outputs.metadata }}");
                let imageTags = metadata['image.name'].split(",");
                let tagString = tags.reduce((acc, tag) => { 
                  return `${acc}
                  - ${tag}` },
                  ""
                )
                return tagString;
            } catch (e) {
              console.log("Err: " + e);
              throw e;
            }

      - name: Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          name: aqua-dht ${{ env.RELEASE_VERSION }}
          tag_name: ${{ env.RELEASE_VERSION }}
          files: |
            aqua-dht.tar.gz
          body: |
            ${{steps.github_release.outputs.changelog}}

            ## Docker tags
            ${{steps.github_release.metadata.result}}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}